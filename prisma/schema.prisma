// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


//**************************/
// Shop Owner Model start
//**************************/
model ShopOwner {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  shopName String
  mobile   String @unique
  pincode  String
  //  relations with product, customer, loneProvider, businessContactInfo model
  //  shopOwner can have multiple product, customer, loneProvider, businessContactInfo

  // shopOwner can have multiple product
  products   Product[]
  // shopOwner can have multiple customer
  customers Customer[]

  // shopOwner can have multiple loneProvider
  loneProviders LoneProvider[]

  // shopOwner can have multiple businessContactInfo
  businessContactInfos BusinessContactInfo[]

  // shopOwner can have multiple customerPaymentHistory
  customerPaymentHistories CustomerPaymentHistory[]
  // shopOwner can have multiple lonePaymentHistory
  lonePaymentHistories      LonePaymentHistory[]

  // shopOwner can have multiple productVoicer
  productVoicers ProductVoicer[]

  // shopOwner can have multiple sellingProduct
  sellingProducts SellingProduct[]

  // shopOwner can have multiple cash
  cashs Cash[]

  cashInHistory  CashInHistory[]
  cashOutHistory CashOutHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
//**************************/
// Shop Owner Model end
//**************************/



//**************************/
// Product Model start
//**************************/
model Product {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  productName     String
  amount          Float
  buyingPrice     Float
  sellingPrice    Float
  productCategory String
  productBrand    String
  unit            String // kg , hali, litter, pic, packate
  //* need to add shop owner id */
  shopOwner       ShopOwner @relation(fields: [shopOwnerId], references: [id])
  shopOwnerId     String    @db.ObjectId

  sellingHistory SellingProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
//**************************/
// Product Model end
//**************************/





//**************************/
// Customer Model start
//**************************/
model Customer {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  customerName String
  phoneNumber   String
  address       String
  deuAmount     Float
  paidAmount    Float
  // customer payment history

  // ShopOwner id
  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id])
  shopOwnerId String    @db.ObjectId

  customerPaymentHistories CustomerPaymentHistory[]

  invoiceHistory ProductVoicer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomerPaymentHistory {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  paymentStatys PaymentStatus
  paymentDate   DateTime      @default(now())

  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id])
  shopOwnerId String    @db.ObjectId

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
//**************************/
// Customer Model end
//**************************/





//**************************/
// Product Voicer Model start
//**************************/
model ProductVoicer {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // ShopOwner id
  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id])
  shopOwnerId String    @db.ObjectId

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String    @db.ObjectId

  sellingProducts SellingProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SellingProduct {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  productName  String
  sellingPrice Float
  amount       Float
  unit         String
  totalPrice   Float // sellingPrice * amount

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  // ShopOwner id
  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id])
  shopOwnerId String    @db.ObjectId

  productVoicer   ProductVoicer @relation(fields: [productVoicerId], references: [id])
  productVoicerId String        @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
//**************************/
// Product Voicer Model end
//**************************/







//**************************/
// Lone Model start
//**************************/
model LoneProvider {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  loneProviderName String
  phoneNumber      String
  address          String
  totalLoneTaken  Float
  loneDeuAmount    Float
  lonePaidAmount   Float
  // paymentHistory
  // ShopOwner id
  shopOwner        ShopOwner @relation(fields: [shopOwnerId], references: [id])
  shopOwnerId      String    @db.ObjectId

  lonePaymentHistories LonePaymentHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LonePaymentHistory {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  lonePaymentStatys PaymentStatus // enum SHOPOWNERRECIVED SHOPOWNERGIVE
  // shopOwnerId
  lonePaymentDate   DateTime      @default(now())

  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id])
  shopOwnerId String    @db.ObjectId

  loneProvider   LoneProvider @relation(fields: [loneProviderId], references: [id])
  loneProviderId String       @db.ObjectId
}
//**************************/
// Lone Model end
//**************************/





//**************************/
// Business Contact Info Model start
//**************************/
model BusinessContactInfo {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  phoneNumber  String
  organization String
  // ShopOwner id
  shopOwner    ShopOwner @relation(fields: [shopOwnerId], references: [id])
  shopOwnerId  String    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//**************************/
// Business Contact Info Model end
//**************************/





//**************************/
// Cash Model start
//**************************/

model Cash {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  cashBalance Float

  cashInHistory  CashInHistory[]
  cashOutHistory CashOutHistory[]

  // ShopOwner id
  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id])
  shopOwnerId String    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CashInHistory {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  cashInAmount Float
  cashInDate   DateTime @default(now())
  cashInFor    String

  // ShopOwner id
  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id])
  shopOwnerId String    @db.ObjectId

  cash   Cash   @relation(fields: [cashId], references: [id])
  cashId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model CashOutHistory {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  cashOutAmount Float
  cashOutFor    String
  cashOutDate   DateTime @default(now())

  // ShopOwner id
  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id])
  shopOwnerId String    @db.ObjectId

  cash   Cash   @relation(fields: [cashId], references: [id])
  cashId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
//**************************/
// Cash Model end
//**************************/



enum PaymentStatus {
  SHOPOWNERRECIVED
  SHOPOWNERGIVE
}
