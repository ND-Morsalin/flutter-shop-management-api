openapi: 3.0.0
info:
  title: "Your API Title"
  version: "1.0.0"
  description: "Description of your API"
paths:
  /api/create-shop-owner:
    post:
      summary: Create a new shop owner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShopOwnerBodyType"
      responses:
        "200":
          description: Shop owner created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShopOwnerResponse"
        "403":
          description: Pin is not same
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/login:
    post:
      summary: Log in as a shop owner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginBodyType"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShopOwnerResponse"
        "404":
          description: Shop owner not found or pin not matched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/product:
    post:
      summary: Create a new product
      tags:
        - Product
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Get all products
      tags:
        - Product
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
      responses:
        "200":
          description: All products
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductsResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/product/{id}:
    get:
      summary: Get a single product by ID
      tags:
        - Product
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the product to get
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
      responses:
        "200":
          description: Product found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a product by ID
      tags:
        - Product
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the product to update
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a product by ID
      tags:
        - Product
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the product to delete
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/customer:
    post:
      summary: Create a new customer
      tags:
        - Customer
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "201":
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerResponse"
        "401":
          description: Unauthorized, Token is not found on header
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Get all customers
      tags:
        - Customer
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
      responses:
        "200":
          description: All customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomersResponse"
        "401":
          description: Unauthorized, Token is not found on header
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/customer/{id}:
    get:
      summary: Get a single customer by ID
      tags:
        - Customer
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the customer to get
      responses:
        "200":
          description: Customer found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerResponse"
        "401":
          description: Unauthorized, Token is not found on header
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a customer by ID
      tags:
        - Customer
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the customer to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "200":
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerResponse"
        "401":
          description: Unauthorized, Token is not found on header
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a customer by ID
      tags:
        - Customer
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the customer to delete
      responses:
        "200":
          description: Customer deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerResponse"
        "401":
          description: Unauthorized, Token is not found on header
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/customer-payment-history:
    post:
      summary: Create a new customer payment history
      tags:
        - Customer Payment History
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerPaymentHistory'
      responses:
        '201':
          description: Customer payment history created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPaymentHistoryResponse'
        '401':
          description: Unauthorized, Token is not found on header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get all customer payment history
      tags:
        - Customer Payment History
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
        - in: query
          name: customerId
          required: true
          schema:
            type: string
          description: ID of the customer
      responses:
        '200':
          description: All customer payment history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPaymentHistoriesResponse'
        '401':
          description: Unauthorized, Token is not found on header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/customer-payment-history/{id}:
    get:
      summary: Get a single customer payment history by ID
      tags:
        - Customer Payment History
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the payment history
        - in: query
          name: customerId
          required: true
          schema:
            type: string
          description: ID of the customer
      responses:
        '200':
          description: Customer payment history found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPaymentHistoryResponse'
        '401':
          description: Unauthorized, Token is not found on header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Payment history not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a customer payment history by ID
      tags:
        - Customer Payment History
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the payment history
        - in: query
          name: customerId
          required: true
          schema:
            type: string
          description: ID of the customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerPaymentHistory'
      responses:
        '200':
          description: Customer payment history updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPaymentHistoryResponse'
        '401':
          description: Unauthorized, Token is not found on header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Payment history not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a customer payment history by ID
      tags:
        - Customer Payment History
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the payment history
        - in: query
          name: customerId
          required: true
          schema:
            type: string
          description: ID of the customer
      responses:
        '200':
          description: Customer payment history deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPaymentHistoryResponse'
        '401':
          description: Unauthorized, Token is not found on header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Payment history not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/lone-provider:
    post:
      summary: Create a new lone provider
      tags:
        - Lone Provider
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoneProvider'
      responses:
        '201':
          description: Lone provider created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoneProviderResponse'
        '401':
          description: Unauthorized, Token is not found on header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get all lone providers
      tags:
        - Lone Provider
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
      responses:
        '200':
          description: All lone providers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoneProvidersResponse'
        '401':
          description: Unauthorized, Token is not found on header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No lone provider found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/lone-provider/{id}:
    get:
      summary: Get a single lone provider by ID
      tags:
        - Lone Provider
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the lone provider
      responses:
        '200':
          description: Lone provider found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoneProviderResponse'
        '401':
          description: Unauthorized, Token is not found on header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Lone provider not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a lone provider by ID
      tags:
        - Lone Provider
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the lone provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoneProvider'
      responses:
        '200':
          description: Lone provider updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoneProviderResponse'
        '401':
          description: Unauthorized, Token is not found on header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Lone provider not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a lone provider by ID
      tags:
        - Lone Provider
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
          description: JWT token of the shop owner
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the lone provider
      responses:
        '200':
          description: Lone provider deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoneProviderResponse'
        '401':
          description: Unauthorized, Token is not found on header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Lone provider not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /product-voicer:
    post:
      summary: Create a new product voicer
      
      tags:
        - ProductVoicer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sellingProducts:
                  type: array
                  items:
                    $ref: '#/components/schemas/SellingProduct'
                customerId:
                  type: string
              required:
                - sellingProducts
                - customerId
      responses:
        '201':
          description: Product voicer created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates if the request was successful
                  productVoicer:
                    $ref: '#/components/schemas/ProductVoicer'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates if the request was successful
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: validation error
                          description: The type of error
                        value:
                          type: string
                          example: ""
                          description: The value of the error
                        msg:
                          type: string
                          example: Customer not found
                          description: The error message
                        path:
                          type: string
                          example: customerId
                          description: The path related to the error
                        location:
                          type: string
                          example: createProductVoicer
                          description: The location of the error in the code
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates if the request was successful
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: server error
                          description: The type of error
                        value:
                          type: string
                          example: ""
                          description: The value of the error
                        msg:
                          type: string
                          example: Internal server error
                          description: The error message
                        path:
                          type: string
                          example: server
                          description: The path related to the error
                        location:
                          type: string
                          example: createProductVoicer
                          description: The location of the error in the code

components:
  schemas:
    ShopOwnerBodyType:
      type: object
      properties:
        shopName:
          type: string
        mobile:
          type: string
        pincode:
          type: string
        confirmPincode:
          type: string
      required:
        - shopName
        - mobile
        - pincode
        - confirmPincode
    LoginBodyType:
      type: object
      properties:
        mobile:
          type: string
        pincode:
          type: string
      required:
        - mobile
        - pincode
    ShopOwnerResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          properties:
            id:
              type: string
            mobile:
              type: string
            shopName:
              type: string
    Product:
      type: object
      properties:
        productName:
          type: string
        stokeAmount:
          type: number
        buyingPrice:
          type: number
        sellingPrice:
          type: number
        productCategory:
          type: string
        productBrand:
          type: string
        unit:
          type: string
        shopOwnerId:
          type: string
      required:
        - productName
        - stokeAmount
        - buyingPrice
        - sellingPrice
        - productCategory
        - productBrand
        - unit
        - shopOwnerId
    ProductResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        product:
          $ref: "#/components/schemas/Product"
    ProductsResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"
    Customer:
      type: object
      properties:
        address:
          type: string
        customerName:
          type: string
        phoneNumber:
          type: string
        shopOwnerId:
          type: string
        deuAmount:
          type: number
        paidAmount:
          type: number
      required:
        - address
        - customerName
        - phoneNumber
        - shopOwnerId
        - deuAmount
        - paidAmount
    CustomerResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        customer:
          $ref: "#/components/schemas/Customer"
    CustomersResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        customers:
          type: array
          items:
            $ref: "#/components/schemas/Customer"
    CustomerPaymentHistory:
      type: object
      properties:
        paymentDate:
          type: string
          format: date
        paymentStatus:
          type: string
        paymentAmount:
          type: number
        customerId:
          type: string
      required:
        - paymentDate
        - paymentStatus
        - paymentAmount
        - customerId
    CustomerPaymentHistoryResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        customerPaymentHistory:
          $ref: '#/components/schemas/CustomerPaymentHistory'
    CustomerPaymentHistoriesResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        customerPaymentHistories:
          type: array
          items:
            $ref: '#/components/schemas/CustomerPaymentHistory'
    LoneProvider:
      type: object
      properties:
        providerName:
          type: string
        providerMobile:
          type: string
        providerAddress:
          type: string
        providerType:
          type: string
        shopOwnerId:
          type: string
      required:
        - providerName
        - providerMobile
        - providerAddress
        - providerType
        - shopOwnerId
    LoneProviderResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        loneProvider:
          $ref: '#/components/schemas/LoneProvider'
    LoneProvidersResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        loneProviders:
          type: array
          items:
            $ref: '#/components/schemas/LoneProvider'
    ProductVoicer:
      type: object
      properties:
        id:
          type: string
          description: The ID of the product voicer
        customerId:
          type: string
          description: The ID of the customer
        shopOwnerId:
          type: string
          description: The ID of the shop owner
        totalBillAmount:
          type: number
          description: The total bill amount
        sellingProducts:
          type: array
          items:
            $ref: '#/components/schemas/SellingProduct'
    SellingProduct:
      type: object
      properties:
        id:
          type: string
          description: The ID of the selling product
        productName:
          type: string
          description: The name of the product
        sellingPrice:
          type: number
          description: The selling price of the product
        quantity:
          type: integer
          description: The quantity of the product
        totalPrice:
          type: number
          description: The total price of the product
        shopOwnerId:
          type: string
          description: The ID of the shop owner
    
    Error:
      type: object
      properties:
        success:
          type: boolean
        errors:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              value:
                type: string
              msg:
                type: string
              path:
                type: string
              location:
                type: string
